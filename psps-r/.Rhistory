# Step 3: Align datasets
aligned_data <- c(data1, data2)
# Step 4: Inference on aligned data
mean_estimate <- mean(aligned_data)
std_error <- sd(aligned_data) / sqrt(2 * n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
} else {
# If datasets are not aligned, we consider the coverage as NA
mean_estimate <- mean(data1)
std_error <- sd(data1)/sqrt(n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
}
}
# Remove NAs (cases where datasets were not aligned)
# coverages <- na.omit(coverages)
# Calculate empirical coverage
empirical_coverage <- mean(coverages)
# Output the result
cat("Empirical Coverage of 95% Confidence Interval after Alignment:", empirical_coverage * 100, "%\n")
# Set seed for reproducibility
# set.seed(123)
# Number of simulations
n_sim <- 1000
# Sample size for each dataset
n <- 50
# True parameter (mean difference)
true_diff <- 0
# Store results
coverages <- numeric(n_sim)
for (i in 1:n_sim) {
# Step 1: Generate data
# Generate two datasets from N(0,1)
data1 <- rnorm(n, mean = true_diff, sd = 1)
data2 <- rnorm(n, mean = 0.5, sd = 1)
# Step 2: Alignment decision
# Use a t-test to decide whether to align
p_value <- t.test(data1, data2)$p.value
# If p-value > 0.05, decide to align (datasets are similar)
if (p_value > 0.05) {
# Step 3: Align datasets
aligned_data <- c(data1, data2)
# Step 4: Inference on aligned data
mean_estimate <- mean(aligned_data)
std_error <- sd(aligned_data) / sqrt(2 * n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
} else {
# If datasets are not aligned, we consider the coverage as NA
mean_estimate <- mean(data1)
std_error <- sd(data1)/sqrt(n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
}
}
# Remove NAs (cases where datasets were not aligned)
# coverages <- na.omit(coverages)
# Calculate empirical coverage
empirical_coverage <- mean(coverages)
# Output the result
cat("Empirical Coverage of 95% Confidence Interval after Alignment:", empirical_coverage * 100, "%\n")
# Set seed for reproducibility
# set.seed(123)
# Number of simulations
n_sim <- 1000
# Sample size for each dataset
n <- 50
# True parameter (mean difference)
true_diff <- 0
# Store results
coverages <- numeric(n_sim)
for (i in 1:n_sim) {
# Step 1: Generate data
# Generate two datasets from N(0,1)
data1 <- rnorm(n, mean = true_diff, sd = 1)
data2 <- rnorm(n, mean = 0.6, sd = 1)
# Step 2: Alignment decision
# Use a t-test to decide whether to align
p_value <- t.test(data1, data2)$p.value
# If p-value > 0.05, decide to align (datasets are similar)
if (p_value > 0.05) {
# Step 3: Align datasets
aligned_data <- c(data1, data2)
# Step 4: Inference on aligned data
mean_estimate <- mean(aligned_data)
std_error <- sd(aligned_data) / sqrt(2 * n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
} else {
# If datasets are not aligned, we consider the coverage as NA
mean_estimate <- mean(data1)
std_error <- sd(data1)/sqrt(n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
}
}
# Remove NAs (cases where datasets were not aligned)
# coverages <- na.omit(coverages)
# Calculate empirical coverage
empirical_coverage <- mean(coverages)
# Output the result
cat("Empirical Coverage of 95% Confidence Interval after Alignment:", empirical_coverage * 100, "%\n")
# Set seed for reproducibility
# set.seed(123)
# Number of simulations
n_sim <- 1000
# Sample size for each dataset
n <- 50
# True parameter (mean difference)
true_diff <- 0
# Store results
coverages <- numeric(n_sim)
for (i in 1:n_sim) {
# Step 1: Generate data
# Generate two datasets from N(0,1)
data1 <- rnorm(n, mean = true_diff, sd = 1)
data2 <- rnorm(n, mean = 0.4, sd = 1)
# Step 2: Alignment decision
# Use a t-test to decide whether to align
p_value <- t.test(data1, data2)$p.value
# If p-value > 0.05, decide to align (datasets are similar)
if (p_value > 0.05) {
# Step 3: Align datasets
aligned_data <- c(data1, data2)
# Step 4: Inference on aligned data
mean_estimate <- mean(aligned_data)
std_error <- sd(aligned_data) / sqrt(2 * n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
} else {
# If datasets are not aligned, we consider the coverage as NA
mean_estimate <- mean(data1)
std_error <- sd(data1)/sqrt(n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
}
}
# Remove NAs (cases where datasets were not aligned)
# coverages <- na.omit(coverages)
# Calculate empirical coverage
empirical_coverage <- mean(coverages)
# Output the result
cat("Empirical Coverage of 95% Confidence Interval after Alignment:", empirical_coverage * 100, "%\n")
# Set seed for reproducibility
# set.seed(123)
# Number of simulations
n_sim <- 1000
# Sample size for each dataset
n <- 500
# True parameter (mean difference)
true_diff <- 0
# Store results
coverages <- numeric(n_sim)
for (i in 1:n_sim) {
# Step 1: Generate data
# Generate two datasets from N(0,1)
data1 <- rnorm(n, mean = true_diff, sd = 1)
data2 <- rnorm(n, mean = 0.4, sd = 1)
# Step 2: Alignment decision
# Use a t-test to decide whether to align
p_value <- t.test(data1, data2)$p.value
# If p-value > 0.05, decide to align (datasets are similar)
if (p_value > 0.05) {
# Step 3: Align datasets
aligned_data <- c(data1, data2)
# Step 4: Inference on aligned data
mean_estimate <- mean(aligned_data)
std_error <- sd(aligned_data) / sqrt(2 * n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
} else {
# If datasets are not aligned, we consider the coverage as NA
mean_estimate <- mean(data1)
std_error <- sd(data1)/sqrt(n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
}
}
# Remove NAs (cases where datasets were not aligned)
# coverages <- na.omit(coverages)
# Calculate empirical coverage
empirical_coverage <- mean(coverages)
# Output the result
cat("Empirical Coverage of 95% Confidence Interval after Alignment:", empirical_coverage * 100, "%\n")
# Set seed for reproducibility
# set.seed(123)
# Number of simulations
n_sim <- 1000
# Sample size for each dataset
n <- 500
# True parameter (mean difference)
true_diff <- 0
# Store results
coverages <- numeric(n_sim)
for (i in 1:n_sim) {
# Step 1: Generate data
# Generate two datasets from N(0,1)
data1 <- rnorm(n, mean = true_diff, sd = 1)
data2 <- rnorm(n, mean = 0.4, sd = 1)
# Step 2: Alignment decision
# Use a t-test to decide whether to align
p_value <- t.test(data1, data2)$p.value
# If p-value > 0.05, decide to align (datasets are similar)
if (p_value > 0.05) {
# Step 3: Align datasets
aligned_data <- c(data1, data2)
# Step 4: Inference on aligned data
mean_estimate <- mean(aligned_data)
std_error <- sd(aligned_data) / sqrt(2 * n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
} else {
# If datasets are not aligned, we consider the coverage as NA
mean_estimate <- mean(data1)
std_error <- sd(data1)/sqrt(n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
}
}
# Remove NAs (cases where datasets were not aligned)
# coverages <- na.omit(coverages)
# Calculate empirical coverage
empirical_coverage <- mean(coverages)
# Output the result
cat("Empirical Coverage of 95% Confidence Interval after Alignment:", empirical_coverage * 100, "%\n")
# Set seed for reproducibility
# set.seed(123)
# Number of simulations
n_sim <- 1000
# Sample size for each dataset
n <- 500
# True parameter (mean difference)
true_diff <- 0
# Store results
coverages <- numeric(n_sim)
for (i in 1:n_sim) {
# Step 1: Generate data
# Generate two datasets from N(0,1)
data1 <- rnorm(n, mean = true_diff, sd = 1)
data2 <- rnorm(n, mean = 0.2, sd = 1)
# Step 2: Alignment decision
# Use a t-test to decide whether to align
p_value <- t.test(data1, data2)$p.value
# If p-value > 0.05, decide to align (datasets are similar)
if (p_value > 0.05) {
# Step 3: Align datasets
aligned_data <- c(data1, data2)
# Step 4: Inference on aligned data
mean_estimate <- mean(aligned_data)
std_error <- sd(aligned_data) / sqrt(2 * n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
} else {
# If datasets are not aligned, we consider the coverage as NA
mean_estimate <- mean(data1)
std_error <- sd(data1)/sqrt(n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
}
}
# Remove NAs (cases where datasets were not aligned)
# coverages <- na.omit(coverages)
# Calculate empirical coverage
empirical_coverage <- mean(coverages)
# Output the result
cat("Empirical Coverage of 95% Confidence Interval after Alignment:", empirical_coverage * 100, "%\n")
# Set seed for reproducibility
# set.seed(123)
# Number of simulations
n_sim <- 1000
# Sample size for each dataset
n <- 500
# True parameter (mean difference)
true_diff <- 0
# Store results
coverages <- numeric(n_sim)
for (i in 1:n_sim) {
# Step 1: Generate data
# Generate two datasets from N(0,1)
data1 <- rnorm(n, mean = true_diff, sd = 1)
data2 <- rnorm(n, mean = 0.1, sd = 1)
# Step 2: Alignment decision
# Use a t-test to decide whether to align
p_value <- t.test(data1, data2)$p.value
# If p-value > 0.05, decide to align (datasets are similar)
if (p_value > 0.05) {
# Step 3: Align datasets
aligned_data <- c(data1, data2)
# Step 4: Inference on aligned data
mean_estimate <- mean(aligned_data)
std_error <- sd(aligned_data) / sqrt(2 * n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
} else {
# If datasets are not aligned, we consider the coverage as NA
mean_estimate <- mean(data1)
std_error <- sd(data1)/sqrt(n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
}
}
# Remove NAs (cases where datasets were not aligned)
# coverages <- na.omit(coverages)
# Calculate empirical coverage
empirical_coverage <- mean(coverages)
# Output the result
cat("Empirical Coverage of 95% Confidence Interval after Alignment:", empirical_coverage * 100, "%\n")
# Set seed for reproducibility
# set.seed(123)
# Number of simulations
n_sim <- 1000
# Sample size for each dataset
n <- 500
# True parameter (mean difference)
true_diff <- 0
# Store results
coverages <- numeric(n_sim)
for (i in 1:n_sim) {
# Step 1: Generate data
# Generate two datasets from N(0,1)
data1 <- rnorm(n, mean = true_diff, sd = 1)
data2 <- rnorm(n, mean = 0.1, sd = 1)
# Step 2: Alignment decision
# Use a t-test to decide whether to align
p_value <- t.test(data1, data2)$p.value
# If p-value > 0.05, decide to align (datasets are similar)
if (p_value > 0.05) {
# Step 3: Align datasets
aligned_data <- c(data1, data2)
# Step 4: Inference on aligned data
mean_estimate <- mean(aligned_data)
std_error <- sd(aligned_data) / sqrt(2 * n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
} else {
# If datasets are not aligned, we consider the coverage as NA
mean_estimate <- mean(data1)
std_error <- sd(data1)/sqrt(n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
}
}
# Remove NAs (cases where datasets were not aligned)
# coverages <- na.omit(coverages)
# Calculate empirical coverage
empirical_coverage <- mean(coverages)
# Output the result
cat("Empirical Coverage of 95% Confidence Interval after Alignment:", empirical_coverage * 100, "%\n")
# Set seed for reproducibility
# set.seed(123)
# Number of simulations
n_sim <- 1000
# Sample size for each dataset
n <- 500
# True parameter (mean difference)
true_diff <- 0
# Store results
coverages <- numeric(n_sim)
for (i in 1:n_sim) {
# Step 1: Generate data
# Generate two datasets from N(0,1)
data1 <- rnorm(n, mean = true_diff, sd = 1)
data2 <- rnorm(n, mean = 0.1, sd = 1)
# Step 2: Alignment decision
# Use a t-test to decide whether to align
p_value <- t.test(data1, data2)$p.value
# If p-value > 0.05, decide to align (datasets are similar)
if (p_value > 0.05) {
# Step 3: Align datasets
aligned_data <- c(data1, data2)
# Step 4: Inference on aligned data
mean_estimate <- mean(aligned_data)
std_error <- sd(aligned_data) / sqrt(2 * n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
} else {
# If datasets are not aligned, we consider the coverage as NA
mean_estimate <- mean(data1)
std_error <- sd(data1)/sqrt(n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
}
}
# Remove NAs (cases where datasets were not aligned)
# coverages <- na.omit(coverages)
# Calculate empirical coverage
empirical_coverage <- mean(coverages)
# Output the result
cat("Empirical Coverage of 95% Confidence Interval after Alignment:", empirical_coverage * 100, "%\n")
# Set seed for reproducibility
# set.seed(123)
# Number of simulations
n_sim <- 1000
# Sample size for each dataset
n <- 500
# True parameter (mean difference)
true_diff <- 0
# Store results
coverages <- numeric(n_sim)
for (i in 1:n_sim) {
# Step 1: Generate data
# Generate two datasets from N(0,1)
data1 <- rnorm(n, mean = true_diff, sd = 1)
data2 <- rnorm(n, mean = 0.1, sd = 1)
# Step 2: Alignment decision
# Use a t-test to decide whether to align
p_value <- t.test(data1, data2)$p.value
# If p-value > 0.05, decide to align (datasets are similar)
if (p_value > 0.05) {
# Step 3: Align datasets
aligned_data <- c(data1, data2)
# Step 4: Inference on aligned data
mean_estimate <- mean(aligned_data)
std_error <- sd(aligned_data) / sqrt(2 * n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
} else {
# If datasets are not aligned, we consider the coverage as NA
mean_estimate <- mean(data1)
std_error <- sd(data1)/sqrt(n)
# 95% confidence interval
ci_lower <- mean_estimate - qt(0.975, df = 2 * n - 1) * std_error
ci_upper <- mean_estimate + qt(0.975, df = 2 * n - 1) * std_error
# Check if the true mean (0) is within the confidence interval
coverages[i] <- (ci_lower <= true_diff) & (ci_upper >= true_diff)
}
}
# Remove NAs (cases where datasets were not aligned)
# coverages <- na.omit(coverages)
# Calculate empirical coverage
empirical_coverage <- mean(coverages)
# Output the result
cat("Empirical Coverage of 95% Confidence Interval after Alignment:", empirical_coverage * 100, "%\n")
BiocManager::install("ShortRead")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ShortRead")
2236+668+6237-343-4149-293-2197
64.26 + 18.92 + 30.55
setwd("/Users/jiacheng/Library/CloudStorage/OneDrive-UW-Madison/Academic/Research/Github/psps/psps-r")
documents()
document()
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
