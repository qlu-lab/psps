# Simulate data for mediation analysis
n_samples <- 200
X <- rnorm(n_samples, mean = 0, sd = 1)  # Predictor
M <- 0.5 * X + rnorm(n_samples, mean = 0, sd = 0.5)  # Mediator
Y <- 0.3 * X + 0 * M + rnorm(n_samples, mean = 0, sd = 1)  # Outcome
data <- tibble(X = X, M = M, Y = Y)
# Fit Bayesian mediation model
fit <- brm(
bf(Y ~ X + M) + bf(M ~ X) + set_rescor(FALSE),
data = data,
family = gaussian,
prior = c(
prior(normal(0, 1), class = b),
prior(exponential(1), class = sigma, resp = "Y"),
prior(exponential(1), class = sigma, resp = "M")
),
sample_prior = TRUE,
chains = 4,
iter = 4000,
warmup = 1000,
control = list(adapt_delta = 0.95),
seed = 123
)
# Extract posterior samples
post_samples <- as_draws_df(fit)
# Compute samples of the indirect effect
indirect_effect_samples <- post_samples$b_Y_M * post_samples$b_M_X
# Calculate the probability that the indirect effect is different from zero
prob_non_zero <- mean(indirect_effect_samples != 0)
# Estimate credible interval for the indirect effect
ci_indirect_effect <- quantile(indirect_effect_samples, probs = c(0.025, 0.975))
# Print summary of the indirect effect
cat("Indirect Effect:\n")
cat("Mean:", mean(indirect_effect_samples), "\n")
cat("95% Credible Interval:", ci_indirect_effect[1], "to", ci_indirect_effect[2], "\n")
cat("Probability of non-zero indirect effect:", prob_non_zero, "\n")
threshold <- 0.1  # Choose an appropriate threshold
prob_significant <- mean(abs(indirect_effect_samples) > threshold)
cat("Probability of practically significant indirect effect:", prob_significant, "\n")
# Visualize the distribution of the indirect effect
ggplot(data.frame(indirect_effect = indirect_effect_samples), aes(x = indirect_effect)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
geom_vline(xintercept = 0, color = "red", linetype = "dashed") +
labs(title = "Distribution of Indirect Effect",
x = "Indirect Effect",
y = "Count") +
theme_minimal()
threshold <- 0.1  # Choose an appropriate threshold
prob_significant <- mean(abs(indirect_effect_samples) > threshold)
cat("Probability of practically significant indirect effect:", prob_significant, "\n")
# Function to calculate Bayesian FDR
calc_bfdr <- function(samples, threshold) {
probs <- mean(abs(samples) > threshold)
if (probs == 0) return(0)
return((1 - probs) / probs)
}
# Calculate BFDR for each threshold
bfdrs <- sapply(thresholds, function(t) calc_bfdr(indirect_effect_samples, t))
install.packages("bama")
install.packages("bama")
library(bama)
# print just the first 10 columns
head(bama.data[,1:10])
Y <- bama.data$y
A <- bama.data$a
# grab the mediators from the example data.frame
M <- as.matrix(bama.data[, paste0("m", 1:100)], nrow(bama.data))
# We just include the intercept term in this example as we have no covariates
C1 <- matrix(1, 1000, 1)
C2 <- matrix(1, 1000, 1)
beta.m  <- rep(0, 100)
alpha.a <- rep(0, 100)
out <- bama(Y = Y, A = A, M = M, C1 = C1, C2 = C2, method = "BSLMM", seed = 1234,
burnin = 1000, ndraws = 1100, weights = NULL, inits = NULL,
control = list(k = 2, lm0 = 1e-04, lm1 = 1, l = 1))
# The package includes a function to summarise output from 'bama'
summary <- summary(out)
head(summary)
# Product Threshold Gaussian
ptgmod = bama(Y = Y, A = A, M = M, C1 = C1, C2 = C2, method = "PTG", seed = 1234,
burnin = 1000, ndraws = 1100, weights = NULL, inits = NULL,
control = list(lambda0 = 0.04, lambda1 = 0.2, lambda2 = 0.2))
mean(ptgmod$beta.a)
apply(ptgmod$beta.m, 2, mean)
apply(ptgmod$alpha.a, 2, mean)
apply(ptgmod$betam_member, 2, mean)
apply(ptgmod$alphaa_member, 2, mean)
# Gaussian Mixture Model
gmmmod = bama(Y = Y, A = A, M = M, C1 = C1, C2 = C2, method = "GMM", seed = 1234,
burnin = 1000, ndraws = 1100, weights = NULL, inits = NULL,
control = list(phi0 = 0.01, phi1 = 0.01))
mean(ptgmod$beta.a)
apply(ptgmod$beta.m, 2, mean)
apply(ptgmod$alpha.a, 2, mean)
apply(ptgmod$betam_member, 2, mean)
apply(ptgmod$alphaa_member, 2, mean)
fit
# Load necessary library
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)
library(MASS)
# Set parameters
n <- 1000         # Number of samples
beta_0k <- 0.5    # Intercept for all k
beta_k <- -0.7    # Slope for all k
alpha <- 2        # Dispersion parameter
# Simulate binary predictor X
X <- rbinom(n, 1, 0.5)  # Binary variable with P(X = 1) = 0.5
# Compute mu_ki for each sample
mu_ki <- exp(beta_0k + X * beta_k)
# Generate negative binomial data
G_ki <- rnbinom(n, size = alpha, mu = mu_ki)
# Print first few rows of the data
head(G_ki)
G_ki
# Load necessary library
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)
library(MASS)
# Set parameters
n <- 1000         # Number of samples
beta_0k <- 0.5    # Intercept for all k
beta_k <- -0.7    # Slope for all k
alpha <- 2        # Dispersion parameter
# Simulate binary predictor X
X <- rbinom(n, 1, 0.5)  # Binary variable with P(X = 1) = 0.5
# Compute mu_ki for each sample
mu_ki <- exp(beta_0k + X * beta_k)
# Generate negative binomial data
G_ki <- rnbinom(n, size = alpha, mu = mu_ki)
# Print first few rows of the data
head(G_ki)
# Fit linear regression between X and G
summary(lm(G_ki ~ X))
# Load necessary library
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)
library(MASS)
# Set parameters
n <- 1000         # Number of samples
beta_0k <- 0.5    # Intercept for all k
beta_k <- -0.7    # Slope for all k
alpha <- 2        # Dispersion parameter
# Simulate binary predictor X
X <- rbinom(n, 1, 0.5)  # Binary variable with P(X = 1) = 0.5
# Compute mu_ki for each sample
mu_ki <- exp(beta_0k + X * beta_k)
# Generate negative binomial data
G_ki <- rnbinom(n, size = alpha, mu = mu_ki)
# Print first few rows of the data
head(G_ki)
# Fit linear regression between X and G
linear_model <- lm(G_ki ~ X)
summary(linear_model)
# Fit negative bionimal regression between X and G
nb_model <- glm.nb(G_ki ~ X)
summary(nb_model)
# Load necessary library
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)
library(MASS)
# Set parameters
n <- 1000         # Number of samples
beta_0k <- 0.5    # Intercept for all k
beta_k <- -0.1    # Slope for all k
alpha <- 2        # Dispersion parameter
# Simulate binary predictor X
X <- rbinom(n, 1, 0.5)  # Binary variable with P(X = 1) = 0.5
# Compute mu_ki for each sample
mu_ki <- exp(beta_0k + X * beta_k)
# Generate negative binomial data
G_ki <- rnbinom(n, size = alpha, mu = mu_ki)
# Print first few rows of the data
head(G_ki)
# Fit linear regression between X and G
linear_model <- lm(G_ki ~ X)
summary(linear_model)
# Fit negative bionimal regression between X and G
nb_model <- glm.nb(G_ki ~ X)
summary(nb_model)
# Load necessary library
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)
library(MASS)
# Set parameters
n <- 1000         # Number of samples
beta_0k <- 0.5    # Intercept for all k
beta_k <- -10    # Slope for all k
alpha <- 2     # Dispersion parameter
# Simulate binary predictor X
X <- rbinom(n, 1, 0.5)  # Binary variable with P(X = 1) = 0.5
# Compute mu_ki for each sample
mu_ki <- exp(beta_0k + X * beta_k)
# Generate negative binomial data
G_ki <- rnbinom(n, size = alpha, mu = mu_ki)
# Print first few rows of the data
head(G_ki)
# Fit linear regression between X and G
linear_model <- lm(G_ki ~ X)
summary(linear_model)
# Fit negative bionimal regression between X and G
nb_model <- glm.nb(G_ki ~ X)
summary(nb_model)
# Load necessary library
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)
library(MASS)
# Set parameters
n <- 1000         # Number of samples
beta_0k <- 0.5    # Intercept for all k
beta_k <- -0.5    # Slope for all k
alpha <- 2     # Dispersion parameter
# Simulate binary predictor X
X <- rbinom(n, 1, 0.5)  # Binary variable with P(X = 1) = 0.5
# Compute mu_ki for each sample
mu_ki <- exp(beta_0k + X * beta_k)
# Generate negative binomial data
G_ki <- rnbinom(n, size = alpha, mu = mu_ki)
# Print first few rows of the data
head(G_ki)
# Fit linear regression between X and G
linear_model <- lm(G_ki ~ X)
summary(linear_model)
# Fit negative bionimal regression between X and G
nb_model <- glm.nb(G_ki ~ X)
summary(nb_model)
# Load necessary library
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)
library(MASS)
# Set parameters
n <- 1000         # Number of samples
beta_0k <- 0.5    # Intercept for all k
beta_k <- -0.5    # Slope for all k
alpha <- 2     # Dispersion parameter
# Simulate binary predictor X
X <- rbinom(n, 1, 0.5)  # Binary variable with P(X = 1) = 0.5
# Compute mu_ki for each sample
mu_ki <- exp(beta_0k + X * beta_k)
# Generate negative binomial data
G_ki <- rnbinom(n, size = alpha, mu = mu_ki)
# Print first few rows of the data
head(G_ki)
# Fit linear regression between X and G
linear_model <- lm(log(G_ki) ~ X)
# Load necessary library
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)
library(MASS)
# Set parameters
n <- 1000         # Number of samples
beta_0k <- 0.5    # Intercept for all k
beta_k <- -0.5    # Slope for all k
alpha <- 2     # Dispersion parameter
# Simulate binary predictor X
X <- rbinom(n, 1, 0.5)  # Binary variable with P(X = 1) = 0.5
# Compute mu_ki for each sample
mu_ki <- exp(beta_0k + X * beta_k)
# Generate negative binomial data
G_ki <- rnbinom(n, size = alpha, mu = mu_ki)
# Print first few rows of the data
head(G_ki)
# Fit linear regression between X and G
linear_model <- lm(G_ki ~ X)
summary(linear_model)
# Fit negative bionimal regression between X and G
nb_model <- glm.nb(G_ki ~ X)
summary(nb_model)
# Load necessary library
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)
library(MASS)
# Set parameters
n <- 1000         # Number of samples
beta_0k <- 0.5    # Intercept for all k
beta_k <- -0.5    # Slope for all k
alpha <- 2     # Dispersion parameter
# Simulate binary predictor X
X <- rbinom(n, 1, 0.5)  # Binary variable with P(X = 1) = 0.5
# Compute mu_ki for each sample
mu_ki <- exp(beta_0k + X * beta_k)
# Generate negative binomial data
G_ki <- rnbinom(n, size = alpha, mu = mu_ki)
# Print first few rows of the data
head(G_ki)
# Fit linear regression between X and G
linear_model <- lm(G_ki ~ X)
summary(linear_model)
# Fit negative bionimal regression between X and G
nb_model <- glm.nb(G_ki ~ X)
summary(nb_model)
sd(G_ki)
exp(beta_0k)
# Load necessary library
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)
library(MASS)
# Set parameters
n <- 1000         # Number of samples
beta_0k <- 0.5    # Intercept for all k
beta_k <- -0.5    # Slope for all k
alpha <- 2     # Dispersion parameter
# Simulate binary predictor X
X <- rbinom(n, 1, 0.5)  # Binary variable with P(X = 1) = 0.5
# Compute mu_ki for each sample
mu_ki <- exp(beta_0k + X * beta_k)
# Generate negative binomial data
G_ki <- rnbinom(n, size = alpha, mu = mu_ki)
# Print first few rows of the data
head(G_ki)
# Fit linear regression between X and G
linear_model <- lm(G_ki ~ X)
summary(linear_model)
# Fit negative bionimal regression between X and G
nb_model <- glm.nb(G_ki ~ X)
summary(nb_model)
sd(G_ki)
exp(beta_0k)
# Load necessary library
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)
library(MASS)
# Set parameters
n <- 1000         # Number of samples
beta_0k <- 0.5    # Intercept for all k
beta_k <- -0.5    # Slope for all k
alpha <- 10     # Dispersion parameter
# Simulate binary predictor X
X <- rbinom(n, 1, 0.5)  # Binary variable with P(X = 1) = 0.5
# Compute mu_ki for each sample
mu_ki <- exp(beta_0k + X * beta_k)
# Generate negative binomial data
G_ki <- rnbinom(n, size = alpha, mu = mu_ki)
# Print first few rows of the data
head(G_ki)
# Fit linear regression between X and G
linear_model <- lm(G_ki ~ X)
summary(linear_model)
# Fit negative bionimal regression between X and G
nb_model <- glm.nb(G_ki ~ X)
summary(nb_model)
sd(G_ki)
exp(beta_0k)
# Load necessary library
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)
library(MASS)
# Set parameters
n <- 1000         # Number of samples
beta_0k <- 0.5    # Intercept for all k
beta_k <- -0.5    # Slope for all k
alpha <- 2     # Dispersion parameter
# Simulate binary predictor X
X <- rbinom(n, 1, 0.5)  # Binary variable with P(X = 1) = 0.5
# Compute mu_ki for each sample
mu_ki <- exp(beta_0k + X * beta_k)
# Generate negative binomial data
G_ki <- rnbinom(n, size = alpha, mu = mu_ki)
# Print first few rows of the data
head(G_ki)
# Fit linear regression between X and G
linear_model <- lm(G_ki ~ X)
summary(linear_model)
# Fit negative bionimal regression between X and G
nb_model <- glm.nb(G_ki ~ X)
summary(nb_model)
sd(G_ki)
exp(beta_0k)
# Load necessary library
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)
library(MASS)
# Set parameters
n <- 1000         # Number of samples
beta_0k <- 0.5    # Intercept for all k
beta_k <- -0.5    # Slope for all k
alpha <- 1     # Dispersion parameter
# Simulate binary predictor X
X <- rbinom(n, 1, 0.5)  # Binary variable with P(X = 1) = 0.5
# Compute mu_ki for each sample
mu_ki <- exp(beta_0k + X * beta_k)
# Generate negative binomial data
G_ki <- rnbinom(n, size = alpha, mu = mu_ki)
# Print first few rows of the data
head(G_ki)
# Fit linear regression between X and G
linear_model <- lm(G_ki ~ X)
summary(linear_model)
# Fit negative bionimal regression between X and G
nb_model <- glm.nb(G_ki ~ X)
summary(nb_model)
sd(G_ki)
exp(beta_0k)
# Load necessary library
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)
library(MASS)
# Set parameters
n <- 1000         # Number of samples
beta_0k <- 0.5    # Intercept for all k
beta_k <- -0.5    # Slope for all k
alpha <- 2     # Dispersion parameter
# Simulate binary predictor X
X <- rbinom(n, 1, 0.5)  # Binary variable with P(X = 1) = 0.5
# Compute mu_ki for each sample
mu_ki <- exp(beta_0k + X * beta_k)
# Generate negative binomial data
G_ki <- rnbinom(n, size = alpha, mu = mu_ki)
# Print first few rows of the data
head(G_ki)
# Fit linear regression between X and G
linear_model <- lm(G_ki ~ X)
summary(linear_model)
# Fit negative bionimal regression between X and G
nb_model <- glm.nb(G_ki ~ X)
summary(nb_model)
sd(G_ki)
exp(beta_0k)
# Load necessary library
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)
library(MASS)
# Set parameters
n <- 1000         # Number of samples
beta_0k <- 0.5    # Intercept for all k
beta_k <- -0.5    # Slope for all k
alpha <- 2     # Dispersion parameter
# Simulate binary predictor X
X <- rbinom(n, 1, 0.5)  # Binary variable with P(X = 1) = 0.5
# Compute mu_ki for each sample
mu_ki <- exp(beta_0k + X * beta_k)
# Generate negative binomial data
G_ki <- rnbinom(n, size = alpha, mu = mu_ki)
# Print first few rows of the data
head(G_ki)
# Fit linear regression between X and G
linear_model <- lm(G_ki ~ X)
summary(linear_model)
# Fit negative bionimal regression between X and G
nb_model <- glm.nb(G_ki ~ X)
summary(nb_model)
sd(G_ki)
exp(beta_0k)
# Load necessary library
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)
library(MASS)
# Set parameters
n <- 1000         # Number of samples
beta_0k <- 0.5    # Intercept for all k
beta_k <- -0.5    # Slope for all k
alpha <- 2     # Dispersion parameter
# Simulate binary predictor X
X <- rbinom(n, 1, 0.5)  # Binary variable with P(X = 1) = 0.5
# Compute mu_ki for each sample
mu_ki <- exp(beta_0k + X * beta_k)
# Generate negative binomial data
G_ki <- rnbinom(n, size = alpha, mu = mu_ki)
# Print first few rows of the data
head(G_ki)
# Fit linear regression between X and G
linear_model <- lm(G_ki ~ X)
summary(linear_model)
# Fit negative bionimal regression between X and G
nb_model <- glm.nb(G_ki ~ X)
summary(nb_model)
sd(G_ki)
exp(beta_0k)
25.85 + 27.03 + 53.11 + 54.24
require(data.table)
files <- list.files("/Users/jiacheng/Downloads/pop/DXA_BMD")
#-- Install the IPD package from GitHub
devtools::install_github("jmiao24/IPD")
#-- Load the IPD library
library(IPD)
#-- Load additional libraries
library(tidyverse)
library(patchwork)
install.packages("patchwork")
devtools::install_github("jmiao24/IPD")
#-- Load the IPD library
library(IPD)
#-- Load additional libraries
library(tidyverse)
library(patchwork)
#--- DATA GENERATION -----------------------------------------------------------
#-- Generate example data for linear regression
set.seed(123)
n <- c(10000, 500, 1000)
dat_ols <- simdat(n = n, effect = 1, sigma_Y = 4,
model = "ols", shift = 0, scale = 1)
devtools::install_github("jmiao24/IPD")
#-- Load the IPD library
library(IPD)
#-- Load additional libraries
library(tidyverse)
library(patchwork)
devtools::install_github("jmiao24/IPD", force = TRUE)
library(IPD)
#-- Load additional libraries
library(tidyverse)
library(patchwork)
#--- DATA GENERATION -----------------------------------------------------------
#-- Generate example data for linear regression
set.seed(123)
n <- c(10000, 500, 1000)
dat_ols <- simdat(n = n, effect = 1, sigma_Y = 4,
model = "ols", shift = 0, scale = 1)
?simdat
dat_ols <- simdat(n = n, effect = 1, sigma_Y = 4,
model = "ols", shift = 0, scale = 1)
dat_ols <- IPD::simdat(n = n, effect = 1, sigma_Y = 4,
model = "ols", shift = 0, scale = 1)
zdat_ols <- simdat(n = n, effect = 1, sigma_Y = 4,
model = "ols", shift = 0, scale = 1)
simdat()
n
set.seed(123)
n <- c(10000, 500, 1000)
dat_ols <- simdat(n = n, effect = 1, sigma_Y = 4,
model = "ols", shift = 0, scale = 1)
dat_ols <- simdat(n = n, effect = 1, sigma_Y = 4,
model = "ols", shift = 0, scale = 1)
setwd("/Users/jiacheng/Library/CloudStorage/OneDrive-UW-Madison/Academic/Research/Github/psps/psps-r")
library(devtools)
document()
document()
document()
